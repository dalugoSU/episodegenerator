import random
import requests
from bs4 import BeautifulSoup
from googlesearch import search
import webbrowser
import tkinter as tk
from tkinter import StringVar

# Random episode generator root
root = tk.Tk()
root.minsize(500,500)
root.maxsize(500,500)
root.title("Random Episode Generator")

# Frames that will hold widgets
main_frame = tk.Frame(root, bg='blue') # Main frame to hold top and bottom frames
main_frame.pack(fill='both', expand=True)

# Intro frame

def open():
    intro_frame.destroy()
    intro_frame_label.destroy()
    intro_button.destroy()

intro_frame = tk.Frame(root, bg='light blue')
intro_frame.place(relwidth=1, relheight=1)

intro_frame_label = tk.Label(intro_frame, bg='light yellow', text='Random Episode Generator')
intro_frame_label.place(relx=0.33, rely=0.45)

intro_button = tk.Button(intro_frame, text='Begin', command=lambda: open())
intro_button.place(relx=0.47, rely=0.55)

# Top & Bottom Frames on main frame.
top_frame = tk.Frame(main_frame, bg='light blue')
top_frame.place(relheight=0.5, relwidth=1)

top_frame_text = tk.Text(top_frame, bg='light blue') # Text box to display episode suggestion
top_frame_text.place(relheight=0.7, relwidth=0.8, relx=0.1, rely=0.15)

bottom_frame = tk.Frame(main_frame, bg='light yellow')
bottom_frame.place(relheight=0.5, relwidth=1, rely=0.5)

# Functions and Variables
show = StringVar() # This allows me to pull the show title from the entry box
episode = '' # Setting this to save the episode generated by get_rec()
main_show = ''# Setting this to save the show name gotten from get_rec()

def get_rec():
    try:
        global main_show # Sets main_show variable to global to set it to the show name outside, used to get google link
        main_show = show.get() # gets show from entry box
    
        show_search = f"Wikipedia list of {main_show} episodes" # creates a query to search in google search method. Plugs show name from entry

        for j in search(show_search, tld="co.in", num=1, stop=1, pause=1): # search method from google search, using show_search variable
            url = j # url, only does one search, stops at first option.

        responce = requests.get(url) # get request of generated url (from wiki page)
        html = responce.text # turn to text

        soup = BeautifulSoup(html, 'html.parser') # using beautiful soup go through html pulled by requests module
        episode_tags = soup.select('td.summary') # only select the table containing 'summary'


        def GetTitles(episode_tags): # Pass episode_tags from above
            titleSplit = episode_tags.text.split() # splits titles into list
            episodeTitle = ' '.join([str(elem) for elem in titleSplit]) # Turns list into a string containing episode titles
            return episodeTitle # returns the episode title

        titles = [GetTitles(tag) for tag in episode_tags] # for each td.summary element, pull episode title using function which turns it into string

        number_episodes = len(titles) # Gets number of episodes

        idx = random.randrange(0, number_episodes) # Create a randomm index from 0 to number of episodes

        top_frame_text.insert(tk.END, f'\n\n\nFrom: {main_show.title()}\nYou should watch: {titles[idx]} ') # Insert to tkinter text box, suggestion.

        search_title = titles[idx]

        global episode
        episode = search_title # after setting episode as the global var, set it to episode title name
        
    except ValueError:
        top_frame_text.insert(tk.END, f'\n\n\n No show was entered!')

        
def get_link(main_show, episode): # If user selects yes to suggestion, pass show and episode and do google search and open that link
    query = f"{main_show} {episode} fandom wiki"

    for j in search(query, tld="co.in", num=1, stop=1, pause=1):
        webbrowser.open(j)


bottom_frame_entry = tk.Entry(bottom_frame, bg='light yellow', textvariable=show) # Entry, textVariable allows to pull input
bottom_frame_entry.place(rely=0.38, relx=0.5)

def init(): # Deletes text from box each time a new recommendation is asked
    top_frame_text.delete('1.0', tk.END)


entry_label = tk.Label(bottom_frame, bg='light yellow', text='Enter Show Name')
entry_label.place(rely=0.38, relx=0.24)

generate_button = tk.Button(bottom_frame, bg='light blue', text='Generate Episode', command=lambda: [init(), get_rec()])
generate_button.place(relx=0.38, rely=0.55)

def re_do(): # If no is clicked, another recommendation is generated
    get_rec()

    
yes_button = tk.Button(top_frame, text='Yes', command=lambda: get_link(main_show, episode))
yes_button.place(rely=0.35, relx=0.92)

no_button = tk.Button(top_frame, text='No', command=lambda: [init(), re_do()])
no_button.place(relx=0.92, rely=0.5)


root.mainloop() # Keeps window running until closed
